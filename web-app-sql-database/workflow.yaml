values:
  request:
    auth:
      tenant: ( azure.tenant )
    path:
      subscriptionId: ( azure.subscription )
  database:
    administratorLogin: azuresql
    administratorLoginPassword: "{{ secret (guid provider="RNGCryptoServiceProvider") }}"

operations:

# Deploy arm template templates/101-storage-blob-container/azuredeploy.json

- message: Deploy storage account
  values:
    deployment:
      location: ( azure.location )
      resourceGroupName: ( storage.resourceGroup )
      deploymentName: deploy-storage-{{ guid (datetime add="PT0S") }}
      put:
        properties:          
          mode: Incremental
          parameters: 
            storageAccountPrefix:
              value: ( storage.accountPrefix )
            containerName:
              value: ( storage.containerName )
  {{# indent 2 }}
  {{> deployment.yaml template="templates/101-storage-blob-container/azuredeploy.json" }}
  {{/ indent }}
  output:
    step1: ( deployment.get.properties )


- message: Fetching storage account keys
  condition: ( failure == null && (storage.importName != null || storage.exportName != null) )
  values:
    request:
      path:
        resourceGroupName: ( storage.resourceGroup )
        storageAccountName: ( step1.outputs.storageAccountName.value )
  request: apis/azure/Storage_ListKeys.yaml
  output:
    storage:
      key: ( result.body.keys[0].value )


- message: Deploying web app and sql database
  values:
    deployment:
      location: ( azure.location )
      resourceGroupName: ( app.resourceGroup )
      deploymentName: deploy-web-and-sql-{{ guid (datetime add="PT0S") }}
      put:
        properties:          
          mode: Incremental
          parameters: 
            sqlAdministratorLogin:
              value: ( database.administratorLogin )
            sqlAdministratorLoginPassword:
              value: "( database.administratorLoginPassword )"
  {{# indent 2 }}
  {{> deployment.yaml template="templates/201-web-app-sql-database/azuredeploy.json" }}
  {{/ indent }}
  output:
    step2: ( deployment.get.properties )


- values:
    request:
      path:
        resourceGroupName: ( app.resourceGroup )
        name: ( step2.outputs.siteName.value )
  operations:

  - message: Calling deploy hook
    values:
      request:
        body:
          format: basic
          url: "{{ app.sourcecontrol.repoUrl }}#{{ app.sourcecontrol.branch }}"          
    request: apis/scm/WebApps_Deploy.yaml

  - message: Running database migration
    values:
      request:
        path:
          name: ( step2.outputs.siteName.value )
    request: apis/app/Blogs_Migrate.yaml

  - message: Exporting database to storage account
    condition: ( storage.exportName != null )
    values:
      request:
        path:
          serverName: ( step2.outputs.serverName.value )
          databaseName: ( step2.outputs.databaseName.value )
        body:
          authenticationType: SQL
          administratorLogin: ( database.administratorLogin )
          administratorLoginPassword: "( database.administratorLoginPassword )"
          storageKeyType: StorageAccessKey
          storageKey: ( storage.key )
          storageUri: ( join('', [step1.outputs.storageAccount.value.primaryEndpoints.blob, storage.containerName, '/', to_string(storage.exportName)]) )
    request: apis/azure/Databases_Export.yaml
    output:
      database:
        export:
          uri: ( result.headers.Location[0] )

  - message: Monitoring export...
    condition: ( database.export.uri != null )
    values:
      request:
        path: (database.export.uri)
    request: apis/azure/Databases_ImportExportOperationResults.yaml
    output:
      database:
        export:
          properties: ( result.body.properties | result.body )
    repeat:
      condition: ( database.export.properties.status == 'Pending' || starts_with(database.export.properties.status, 'Running') )
      delay: PT15S
      timeout: PT38M
